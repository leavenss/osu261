/* CS261- Assignment 2 - Question 2
 * Name: Taylor Liss
 * Date: 10/8/17
 * Solution description: These are the answers to questions regarding the amortized analysis of push() and pop() functions.
 */

1. How many cost units are spent in the entire process of performing 32 consecutive push operations on an empty array which starts out at capacity 8, assuming that the array will double in capacity each time a new item is added to an already full dynamic array? As N (ie. the number of pushes) grows large, under this strategy for resizing, what is the big-oh complexity for a push?

    Add 1       Cost 1
    Add 2       Cost 1
    Add 3       Cost 1
    Add 4       Cost 1
    Add 5       Cost 1
    Add 6       Cost 1
    Add 7       Cost 1
    Add 8       Cost 1
    Add 9       Cost 8 + 1
    Add 10      Cost 1
    Add 11      Cost 1
    Add 12      Cost 1
    Add 13      Cost 1
    Add 14      Cost 1
    Add 15      Cost 1
    Add 16      Cost 1
    Add 17      Cost 16 + 1
    Add 18      Cost 1
    Add 19      Cost 1
    Add 20      Cost 1
    Add 21      Cost 1
    Add 22      Cost 1
    Add 23      Cost 1
    Add 24      Cost 1
    Add 25      Cost 1
    Add 26      Cost 1
    Add 27      Cost 1
    Add 28      Cost 1
    Add 29      Cost 1
    Add 30      Cost 1
    Add 31      Cost 1
    Add 32      Cost 1

The total cost for running 32 push operations on an empty array would be 56. As explained in Worksheet 15, if we follow this strategy for resizing, the likelihood of having to double the array decreases and we can therefore say that the amortized constant execution time would be O(1)+ meaning that only occasionally would a push operation not be O(1).

2. How many cost units are spent in the entire process of performing 32 consecutive push operations on an empty array which starts out at capacity 8, assuming that the array will grow by a constant 2 spaces each time a new item is added to an already full dynamic array? As N (ie. the number of pushes) grows large, under this strategy for resizing, what is the big-oh complexity for a push?

        Add 1       Cost 1
        Add 2       Cost 1
        Add 3       Cost 1
        Add 4       Cost 1
        Add 5       Cost 1
        Add 6       Cost 1
        Add 7       Cost 1
        Add 8       Cost 1
        Add 9       Cost 8 + 1
        Add 10      Cost 1
        Add 11      Cost 10 + 1
        Add 12      Cost 1
        Add 13      Cost 12 + 1
        Add 14      Cost 1
        Add 15      Cost 14 + 1
        Add 16      Cost 1
        Add 17      Cost 16 + 1
        Add 18      Cost 1
        Add 19      Cost 18 + 1
        Add 20      Cost 1
        Add 21      Cost 20 + 1
        Add 22      Cost 1
        Add 23      Cost 22 + 1
        Add 24      Cost 1
        Add 25      Cost 24 + 1
        Add 26      Cost 1
        Add 27      Cost 26 + 1
        Add 28      Cost 1
        Add 29      Cost 28 + 1
        Add 30      Cost 1
        Add 31      Cost 30 + 1
        Add 32      Cost 1

    The total cost for running 32 push operations on an empty array would be 260. Every time push() occurs in which you have to copy the previous numbers over, you have an O(n) situation. Every time a cost 1 push() occurs, you have an O(1) situation. Because this evenly alternates between O(n) and O(1), you have a best case situation of O(1) and a worst case situation of O(n) for its complexity.

3. A total performance cost of O(N^2) will result in the following situation:

        (k * n/2) + (k * n/2) + n

    where:  n = the total number of sequential alternating push() and pop() calls
            k = the capacity of the array = n/2
            the starting size of the array is equal to capacity
            the first n/2 in the equation is equal to the number of push calls (half of n)
            the second n/2 in the equation is equal to the number of pops calls (half of n)

    That equation can be reduced to:

        (n^2/2) + n

    Which reduces to O(n^2) due to domination.

    For example, if you made 10 alternating push() and pop() calls (five of each) and the array starts with the capacity and size started at 5 (full):

    (10/2 * 10/2) + (10/2 * 10/2) + 10
    =     (10^2/2) + 10

    This performance issue could be somewhat mitigated by shrinking the array to half its size when it is 1/4 full instead of 1/2 full.


